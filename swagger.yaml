swagger: '2.0'

# swagger 2.0 spec 
#   https://swagger.io/docs/specification/2-0/basic-structure/
#   https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
# swagger 'editor'
#   http://editor.swagger.io/

info:
  title: Something About h5serv / H5Cloud / HSDS REST API
  description: REST API for h5serv or something.
# termsOfService: TODO url
# contact:
#   name: TODO
#   url: : TODO
#   email: TODO
# license
#   name: TODO
#   url: TODO
  version: '1.1'

host: 'localhost:5101'
basePath: '/'
schemes:
  - http
# - https

securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []

externalDocs:
  description: Previous REST API documentation
  url: 'http://h5serv.readthedocs.io/en/latest/index.html'

parameters:
  accept_json:
    name: accept
    in: header
    type: string
    enum:
      - 'application/json'
    default: 'application/json'

  authorization:
    name: Authorization
    in: header
    type: string
    description: >
        Credentials for the request.

        'Basic' authorization, `"Basic " + base64(<username>:<password>)` 

  query_domain:
    name: domain
    in: query
    type: string
    description: >
        Domain on service to access.

        e.g., `/home/user/someproject/somefile`

  content_json_only:
    name: 'Content-Type'
    in: header
#    description: Include if supplying JSON elements in body.
    type: string
    enum:
      - 'application/json'
    default: 'application/json'

  path_group_uuid:
    in: path
    description: >
        UUID of the Group to query.

        e.g., `g-37aa76f6-2c86-11e8-9391-0242ac110009`
    name: id
    type: string
    required: true

  path_dataset_uuid:
    in: path
    description: UUID of the Dataset.
    name: id
    type: string
    required: true
#end parameters

definitions:

  ACLForUser:
    description: Access Control List for a single user `username`.
    type: object
    properties:
      username:
        type: object
        properties:
          create:
            type: boolean
            example: true
          update:
            type: boolean
            example: true
          delete:
            type: boolean
            example: true
          updateACL:
            type: boolean
            example: true
          read:
            type: boolean
            example: true
          readACL:
            type: boolean
            example: true

  ACLS:
    type: object
    description: Access Control Lists for users.
    properties:
      forWhom:
        $ref: '#/definitions/ACLForUser'
    example: 
      test_user1:
        create: true
        update: true
        delete: true
        updateACL: true
        read: true
        readACL: true
      default:
        create: false
        update: false
        delete: false
        updateACL: false
        read: true
        readACL: false

  DatasetInfoFromID:
    type: object
    properties:
      id:
        description: UUID of this Dataset.
        type: string
        example: 'd-21ae0bbe-2dea-11e8-9391-0242ac110009'
      root:
        description: UUID of root Group in Domain.
        type: string
        example: 'g-d313d498-2de4-11e8-9391-0242ac110009'
      domain:
        type: string
        example: '/home/test_user1/file'
      created:
        description: Time when the Dataset was created.
        type: number
        example: 1521734424
      lastModified:
        type: number
        example: 1521734424
      attributeCount:
        type: number
        example: 0
      'type':
        description: TODO
        type: object
        example: 
          base: H5T_STD_U32LE
          class: H5T_INTEGER
      shape:
        description: TODO
        type: object
        example:
          maxdims: [4, 4, 4]
          dims: [4, 4, 4]
# classes: [H5S_SIMPLE, H5S_NULL, H5S_SCALAR]
          class: H5S_SIMPLE
      layout:
        description: TODO
        type: object
        example:
          dims: [4, 4, 4]
          class: H5D_CHUNKED
      creationProperties:
        description: TODO
        type: object
      hrefs: # TODO: count and relations known?
        description: List of references to other objects.
        type: array
        items:
          type: object
          properties:
            href:
              description: URL to reference.
              type: string
            rel:
              description: Relation to this object.
              type: string

  PutValueObject:
    type: object
    properties:
      start:
        description: >
            Start coordinate of update.

            Each coordinate value must be non-negative and less than the extent
            of the dimension.

            Default start value is 0 for each dimension.
        type: array
        items:
          type: number
      stop:
        description: >
            End coordinate of update.

            Each coordinate value must be greater than `start` and less than
            the dimension's extent.
        type: array
        items:
          type: number
      step:
        description: >
            Coordinate increment step for each dimension.

            (TODO) Values must be greater than `start` and less than dimension's
            extent. (This seems wrong, copy-pasted from 'stop'. TEST)
        type: array
        items:
          type: number
      points: # TODO: WISHLIST: enforce array-of-arrays?
        description: >
            List of coordinate points to update.

            Overrides `start`, `stop`, and `step`.

            If dataset is of rank 1 (single-dimension), each item should be an
            integer index not less than zero and less than the extent of the
            dataset.

            If dataset is multi-dimensional, each item should be a list of
            non-negative integers, each array being a valid coordinate in the
            dataset.

            Number of elements in list should equal that of `value`.
        type: array
        items:
          type: string
        example: [[4,3,1], [6,1,2], [12,0,0]]
      value:
        description: >
            JSON array containing values to write.

            (TODO: 'anything in array' may give Swagger some grief.)
        type: array
        items:
          type: string # TODO: not really...
        example: [323, 16, 44]
      value_base64:
        description: >
            Base64-encoded binary data.

            Use instead of `value` for more efficient large data transfers.

            Only supported for fixed-length datatypes.
        type: string

  GetDatasetSchema:
    type: object
    properties:
      index:
        description: >
            List of indices (TODO: coordinates?) corresponding with each value
            returned. i.e., `index[i]` is the coordinate of `value[i]`.

            Only present if `query` parameter is part of the request URI.
        type: array
        items:
          type: string # TODO: integer or array of integers WISHLIST: arrays
        example: [0, 1, 2, 3, 4, 5, 6, 7]
      values:
        type: array
        items:
          type: string # TODO: placeholder for 'any JSON, really'
        example:  # array of arrays!
          - [1, 3, 5, 7]
          - [2, 6, 10, 14]
          - [3, 9, 15, 21]
          - [4, 12, 20, 28]
          - [5, 15, 25, 35]
          - [6, 18, 30, 42]
          - [7, 21, 35, 49]
          - [8, 24, 40, 56]
#end definitions

tags:
  - name: Domain
    description: Operations directly related to a file domain.
#   externalDocs: ?
#     url: ?
  - name: Group
    description: Operations involving Groups.
  - name: Link
    description: Operations involving Links.
  - name: Dataset
    description: Operations involving Datasets.

paths:
  '/':
    put:
      tags:
        - Domain
      summary: Create a new domain on the service.
      description: >
          Domains represent dataspaces analogous to hdf5 files.

          Folders are 'placeholder' domains which lack a root Group. Their
          main use is to manage top-level directories (outside of user space)
          and to fill out a user's directory paths if required.
          E.g., `/home/user/project/missingdir/data.h5`

          Note: Initially, the only object in a domain is the root group. Use
          other `put` and `post` operations to create new objects in the
          domain.

          Note: Domains (and folders) may only be created as direct children
          of existing Domains. e.g., `/home/user/project/missingdir/` _must_
          exist prior to the creation of Domain 
          `/home/user/project/missingdir/data.h5/`.

          Note: The operation will fail if the domain already exists
          (Error 409).
      parameters:
        - $ref: '#/parameters/query_domain'
        - name: folder
          in: query
          type: number
          description: If present and `1`, creates a Folder instead of a Domain.
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '201':
          description: Created.
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              lastModified:
                description: When object was last modified.
                type: number
                example: 1521482043.5271084
              root:
                description: ID of root group.
                type: string
                example: 'g-82da0346-2b9e-11e8-9391-0242ac110009'
              created:
                description: When domain was created.
                type: number
                example: 1521482043.5271084
              owner:
                description: Name of owner.
                type: string
                example: 'test_user1'
              acls:
                $ref: '#/definitions/ACLS'
        '409':
          description: Conflict - Resource already exists.
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Domain
      summary: Get information about the requested domain.
      description: >
          If the domain is of class 'folder', `root` is absent from returned
          JSON object.

          If no domain query paramter is provided, returns:
          `{"domains": [], "href": []}`
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              root:
                description: >
                    UUID of root Group.
                    If Domain is of class 'folder', this entry is not present.
                type: string
                example: 'g-82da0346-2b9e-11e8-9391-0242ac110009'
              owner:
                type: string
                example: 'test_user1'
              class:
                description: >
                    Category of Domain.
                    If 'folder' no root group is included in response.
                type: string
                enum:
                  - domain
                  - folder
                example: domain
              created:
                type: number
                example: 1521476710.039304
              lastModified:
                type: number
                example: 1521476710.039304
              hrefs:
                description: >
                    Array of url references and their relation to this Domain.
                    Should include entries for: `self`, `database`,
                    `groupbase`, `typebase`, `root` (if not class folder?),
                    `acls`, and `parent`.
                type: array
                items:
                  type: object
                  properties:
                    href:
                      description: URL to reference.
                      type: string
                    rel:
                      description: Relation to this Domain.
                      type: string
                example:
                  - rel: acls
                    href: 'http://myfile.test_user1.home/acls'
                  - rel: database
                    href: 'http://myfile.test_user1.home/datasets'
                  - rel: groupbase
                    href: 'http://myfile.test_user1.home/groups'
                  - rel: parent
                    href: 'http://myfile.test_user1.home/?domain=/home/test_user1'
                  - rel: root
                    href: 'http://myfile.test_user1.home/groups/g-17d88042-2b92-11e8-9391-0242ac110009'
                  - rel: self
                    href: 'http://myfile.test_user1.home/'
                  - rel: typebase
                    href: 'http://myfile.test_user1.home/datatypes/'
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Domain
      summary: Delete the specified domain.
      description: >
          Delete the domain and all associated groups, datasets, attributes,
          etc.

          Note: if there are Domains which are children of this Domain
          (e.g., deleting `somedir` from `/home/user/project/somedir/data.h5`),
          those children directories will _not_ be deleted.
          (TODO: abandoned children is incorrect behavior?)
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              domain:
                type: string
                description: domain path
                example: '/home/test_user/some_path/some_file'
        default:
          description: Operation unsuccessful.
  # end '/'

  '/groups':
    post:
      tags:
        - Group
      summary: Create a new Group.
      description: >
          Create a new Group in the given Domain.

          By default, the new Group it not attached to any other object in the
          Domain; it is left to the user or application to appropriately attach
          the new Group, i.e., Link to.

          A link description may be supplied in the request body as
          structured JSON, which will immediately link the new Group. If
          supplying link info, the header `Content-Type: application/json`
          should also be supplied as a matter of course. Note that this
          link will be a hard link -- it refers directly to the object.
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
        - in: body
          name: HardLinkAt
          description: >
              Optional JSON object to immediately create a hard Link to the
              newly-created Group. If present, both `id` and `name` must be
              supplied and `id` must be the UUID of an existing object
              (TODO: Group only?).

              TODO: verify and document edge cases. Is group created, then linked? Is targeter checked for UUID and linkname before? If it returns error code, is the group created but "invisible" because its UUID is never given to user?

              Note that the id reference is _reverse_ the usual for Link
              creation: the `id` value refers to the targeting object, not the
              target object of the link.

              The included example would serve the effect of:

              `POST <yourhost>/groups`

              `PUT <yourhost>/groups/g-a613ed48-2c86-11e8-9391-0242ac110009/links/g2 {"id": "<UUID_of_new>"}`
          schema:
            type: object
            required:
              - id
              - name
            properties:
              id:
                description: 'UUID of object (TODO:Groups only?) to link from.'
                type: string
                example: 'g-a613ed48-2c86-11e8-9391-0242ac110009'
              name:
                description: Title of Link.
                type: string
                example: 'g2'
      responses:
        '201':
          description: New Group created.
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              id:
                description: UUID of new Group.
                type: string
                example: 'g-a613ed48-2c86-11e8-9391-0242ac110009'
              root:
                description: UUID of root Group in Domain.
                type: string
                example: 'g-37aa76f6-2c86-11e8-9391-0242ac110009'
              lastModified:
                type: number
                example: 1521581745.9365487
              created: 
                type: number
                example: 1521581745.9365487
              attributeCount:
                type: number
                example: 0
              linkCount:
                type: number
                example: 0
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Group
      summary: Get all non-root Group UUIDs in Domain.
      description: >
          Get UUIDs for all non-root Groups in Domain.

          Groups must be reachable via Link (TODO: via hard link only.) from
          root Group, either directly or indirectly. If Groups exist which are
          unlinked or not reachable by tree originating at root, they will not
          be included in the list.
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  description: UUID of each Group.
                  type: string
                example:
                 - 'g-a613ed48-2c86-11e8-9391-0242ac110009'
                 - 'g-37aa76f6-2c86-11e8-9391-0242ac110009'
              hrefs:
                type: array
                items:
                  description: >
                      References to other objects.

                      Should contain references for:
                      `attributes`,
                      `home`,
                      `links`,
                      `root`,
                      `self`.
                  type: object
                  properties: 
                    href: 
                      description: URL reference.
                      type: string
                    rel: 
                      description: Relation to this object.
                      type: string
                example: 
                  - rel: 'attributes'
                    href: 'http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009/attributes?domain=/home/test_user1/file'
                  - rel: 'home'
                    href: 'http://localhost:5101/?domain=/home/test_user1/file'
                  - rel: 'links'
                    href: 'http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009/links?domain=/home/test_user1/file'
                  - rel: 'root'
                    href: 'http://localhost:5101/groups/g-ed14d712-3847-11e8-a123-0242ac110009?domain=/home/test_user1/file'
                  - rel: 'self'
                    href: 'http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009?domain=/home/test_user1/file'
        default:
          description: Operation unsuccessful.
  # end '/groups/'

  '/groups/{id}':
    get:
      tags:
        - Group
      summary: Get information about a Group.
      description: Get Group information.
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          headers:
            content-length:
              description: Length of response in bytes.
              type: string
            Etag:
              description: Hash-code status of resource.
              type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              type: string
          schema:
            type: object
            properties:
              id:
                description: UUID of this Group.
                type: string
                example: 'g-37aa76f6-2c86-11e8-9391-0242ac110009'
              root:
                description: UUID of root Group.
                type: string
                example: 'g-37aa76f6-2c86-11e8-9391-0242ac110009'
              created:
                type: number
                example: 1521581560.6883142
              lastModified:
                type: number
                example: 1521644498.984212
              domain:
                type: string
                example: '/home/test_user1/file'
              attributeCount:
                type: number
                example: 4
              linkCount:
                type: number
                example: 2
              hrefs:
                description: List of references to other objects.
                type: array
                items:
                  type: object
                  properties:
                    rel:
                      description: Relation to this object.
                      type: string
                      example: 'self'
                    href:
                      description: URL to reference.
                      type: string
                      example: 'http://myfile.test_user1.home/'
                example:
                  - rel: 'attributes'
                    href: 'http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/attributes?domain=/home/test_user1/file'
                  - rel: 'home'
                    href: 'http://localhost:5101/?domain=/home/test_user1/file'
                  - rel: 'links'
                    href: 'http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/links?domain=/home/test_user1/file'
                  - rel: 'root'
                    href: 'http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file'
                  - rel: 'self'
                    href: 'http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file'
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Group
      summary: Delete a Group.
      description: >
        TODO: Will delete attributes of the Group.

        Will _not_ delete: (TODO: extensive tests to verify)

        + Objects (Groups, Types, Datasets) this object linked to

        + Links to this Group
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Group removed.
          schema:
            type: object
        default:
          description: Operation unsuccessful.
  # end '/groups/{id}'

  '/groups/{id}/links':
    get:
      tags:
        - Link
      summary: List all Links in a Group.
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              links:
                type: array
                items:
                  type: object
                  properties: 
                    id:
                      description: UUID of Link target.
                      type: string
                      example: 'g-a613ed48-2c86-11e8-9391-0242ac110009'
                    created:
                      type: number
                      example: 1521644498.984212
                    class:
                      description: >
                          Indicate whether this Link is hard, soft, or
                          external.
                      type: string
                      enum:
                        - 'H5L_TYPE_HARD'
                      #  - 'H5L_TYPE_SOFT' TODO
                      #  - 'H5L_TYPE_EXTERNAL' TODO
                      example: 'H5L_TYPE_HARD'
                    title:
                      description: >
                          Name/label/title of the Link, as provided upon
                          creation (TODO: relative to the origin?).
                      type: string
                      example: 'g1'
                    target:
                      description: URL of Link target.
                      type: string
                      example: 'http://localhost:5101/groups/g-a613ed48-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file'
                    href:
                      description: URL to origin of Link.
                      type: string
                      example: 'http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/links/g1?domain=/home/test_user1/file'
                    collection:
                      description: >
                          What kind of object is the target. (TODO)
                      type: string
                      enum:
                        - 'groups'
                        - 'datasets'
                      #  - 'datatypes' TODO
                      #  - 'attributes' TODO
                      example: 'groups'
              hrefs:
                type: array
                description: >
                    List of references to other entities.

                    Should contain references for:
                    `home`,
                    `owner`,
                    `self`.
                items:
                  type: object
                  properties:
                    rel:
                      description: Relation to this object.
                      type: string
                    href:
                      description: URL to reference.
                      type: string
                example:
                  - rel: 'home'
                    href': 'http://localhost:5101/?domain=/home/test_user1/file'
                  - rel: 'owner'
                    href': 'http://localhost:5101/groups/g-cbb6b840-3849-11e8-a123-0242ac110009?domain=/home/test_user1/file'
                  - rel: 'self'
                    href': 'http://localhost:5101/groups/g-cbb6b840-3849-11e8-a123-0242ac110009/links?domain=/home/test_user1/file'
        default:
          description: Operation unsuccessful.
  # end '/groups/{id}/links':

  '/groups/{id}/links/{linkname}':
    put:
      tags:
        - Link
      summary: Create a new Link in a Group.
      description: >
          Link will be 'hard', 'soft', or 'external' depending on request
          elements.

          If `id` is provided, it will override other properties and attempt to
          create a hard link to the object with that UUID.

          If `h5path` is provided, will create a symbolic link to object (if
          any) at the given path -- either a soft link within this domain if no
          domain is specified, or an external link.

          If `h5domain` is provided, will create an external link, pointing to
          the object (if any) at `h5path` in domain `h5domain`.
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - in: path
          name: linkname
          description: >
              URL-encoded name of the Link.

              Label/name/title of the Link, e.g., "dset1" or "group3".

              TODO: linkname cannot contain slashes, as in a directory.
          type: string
          required: true
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
        - in: body
          name: LinkSpecification
          description: >
              JSON object describing the Link to create.

              Requires at least one of `id` and `h5path`; if both supplied,
              `id` takes priority. `h5domain` applies only if `h5path` is
              present, providing the Domain for an external Link.
          required: true
          schema:
            type: object
            properties:
              id:
                description: >
                   UUID of object to link to. Creates a hard link.

                   Overrides other fields.
                type: string
                example: 'g-37aa76f6-2c86-11e8-9391-0242ac110009'
              h5path:
                description: >
                   Path to an object relative to a Domain's root.
                   TODO: Resolves by following Links to groups that match the
                   path elements until a non-group terminal is reached.

                   If used, will create a soft or external link.
                type: string
                example: '/dset1'
              h5domain:
                description: >
                    URL of external domain.

                    Results in an external link.

                    Requires `h5path` be present.
                type: string
                example: 'external_target.test.hdfgroup.org'
      responses:
        '201':
          description: New Link created.
          schema:
            type: object
            description: 'Always returns `{"hrefs": []}`.'
            example:
              hrefs: []
        default:
          description: Operation unsuccessful.

    get:
      tags: 
        - Link
      summary: Get Link info.
      description: Get information about a given Link.
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - in: path
          name: linkname
          description: >
              URL-encoded name of the Link.

              Label/name/title of the Link, e.g., "dset1" or "group3".
          type: string
          required: true
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              lastModified:
                type: number
              created:
                type: number
              link:
                type: object
                properties:
                  id:
                    type: string
                    example: 'g-a613ed48-2c86-11e8-9391-0242ac110009'
                  title:
                    type: string
                    example: 'g1'
                  collection:
                    type: string
                    example: 'group'
                  class:
                    type: string
                    example: 'H5L_TYPE_HARD'
              hrefs:
                type: array
                description: >
                    List of references to other entities.

                    Should contain references for:
                    `home`,
                    `owner`,
                    `self`,
                    `target`,
                items:
                  type: object
                  properties:
                    href:
                      description: URL to reference.
                      type: string
                    rel:
                      description: Relation to this object.
                      type: string
                example:
                  - rel: 'home'
                    href: 'http://localhost:5101/?domain=/home/test_user1/file'
                  - rel: 'owner'
                    href: 'http://localhost:5101/groups/g-8822ef7a-384b-11e8-a123-0242ac110009?domain=/home/test_user1/file'
                  - rel: 'self'
                    href: 'http://localhost:5101/groups/g-8822ef7a-384b-11e8-a123-0242ac110009/links/g1?domain=/home/test_user1/file'
                  - rel: 'target'
                    href: 'http://localhost:5101/groups/g-a613ed48-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file'
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Link
      summary: Delete Link.
      description: Will _not_ delete the target object.
      parameters:
        - $ref: '#/parameters/path_group_uuid'
        - in: path
          name: linkname
          description: >
              URL-encoded name of the Link.

              Label/name/title of the Link, e.g., "dset1" or "group3".
          type: string
          required: true
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
      responses:
        '200':
          description: Link deleted.
          schema:
            type: object
            description: 'Always returns `{"hrefs": []}`.'
            example:
              href: []
        default:
          description: Operation unsuccessful.
  # end '/groups/{id}/links/{linkname}'

  '/datasets':
    post:
      tags:
        - Dataset
      summary: Create a Dataset.
      description: >
          Create a new Dataset object in the Domain.

          New object is not linked to or by any other object upon creation;
          will not appear in `datasets` listing until linked to tree
          originating at the Domain's root Group.
      consumes:
        - 'application/json'
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
        - in: body
          name: DatasetCreationSchema
          description: >
              JSON object describing the Dataset's properties.
          required: true
          schema:
            type: object
            properties:
              'type':
                description: >
                    Predefined data Type, UUID of a commtted type, or JSON
                    object description of a Type.

                    Must be present.

                    Predefined types are:
                    `H5T_STD_U8BE`, (integer types of various sizes and
                    `H5T_STD_U8LE`,  endainness)
                    `H5T_STD_I8BE`,
                    `H5T_STD_I8LE`,
                    `H5T_STD_U16BE`,
                    `H5T_STD_U16LE`,
                    `H5T_STD_I16BE`,
                    `H5T_STD_I16LE`,
                    `H5T_STD_U32BE`,
                    `H5T_STD_U32LE`,
                    `H5T_STD_I32BE`,
                    `H5T_STD_I32LE`,
                    `H5T_STD_U64BE`,
                    `H5T_STD_U64LE`,
                    `H5T_STD_I64BE`,
                    `H5T_STD_I64LE`,
                    `H5T_IEEE_F32BE`, (floating-point types)
                    `H5T_IEEE_F32LE`,
                    `H5T_IEEE_F64BE`,
                    `H5T_IEEE_F64LE`

                    TODO: Type description objects.
                    For now, see: http://h5serv.readthedocs.io/en/latest/Types/index.html
                type: string
                example: 'H5T_STD_U32LE'
              shape:
                description: >
                    Either `H5S_NULL` or an integer array giving the initial
                    dimensions of the dataset.

                    If omitted, a scalar dataset will be created.

                    TODO: single integer (not integer array) is accepted for
                    one-dimensional dataset (vector), but is it the _only_
                    accepted input? verify.

                    If value is `H5S_NULL`, a dataset will be created which
                    can have a type and attributes, but unable to hold any
                    value.
                type: string
                example: [128, 64]
              maxdims:
                description: >
                    Integer array diving the maximum allowed extent for each
                    dimension.

                    If 0, the extent is unlimited.
                type: array
                items:
                  type: number
                example: [0, 512]
              creationProperties:
                description: TODO
                type: object
      responses:
        '201':
          description: Dataset created.
          schema:
            type: object
            properties:
              id:
                description: UUID of this Dataset.
                type: string
              root:
                description: UUID of root Group in Domain.
                type: string
              created:
                type: number
              lastModified:
                type: number
              attributeCount:
                type: number
              'type':
                description: TODO
                type: object
              shape:
                description: TODO
                type: object
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Dataset
      summary: List Datasets.
      description: >
          Only includes Datasets that are part of the tree linked to the root
          Group in the Domain.
      parameters:
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              datasets:
                type: array
                items:
                  description: UUID of each Dataset.
                  type: string
                  example: 'd-21ae0bbe-2dea-11e8-9391-0242ac110009'
              hrefs:
                type: array
                description: >
                    List of references to other objects.

                    Should contain references for:
                    `attributes`,
                    `data`,
                    `home`,
                    `root`,
                    `self`
                items:
                  type: object
                  properties: 
                    href: 
                      description: URL reference.
                      type: string
                    rel: 
                      description: Relation to this object.
                      type: string
                example:
                  - rel: 'attributes'
                    href: 'http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009/attributes?domain=/home/test_user_1/file'
                  - rel': 'data'
                    href: 'http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009/value?domain=/home/test_user_1/file'
                  - rel: 'home'
                    href: 'http://localhost:5101/?domain=/home/test_user_1/file'
                  - rel: 'root'
                    href: 'http://localhost:5101/groups/g-d20a1cc2-3854-11e8-a123-0242ac110009?domain=/home/test_user_1/file'
                  - rel: 'self'
                    href: 'http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009?domain=/home/test_user_1/file'

        default:
          description: Operation unsuccessful.
  # end '/datasets'

  '/datasets/{id}':
    get:
      tags:
        - Dataset
      summary: Get information about a Dataset.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DatasetInfoFromID'
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Dataset
      summary: Delete a Dataset.
      description: 'Delete Dataset. (TODO: links to are or are not deleted?)'
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Dataset deleted.
          schema:
            type: object
        default:
          description: Operation unsuccessful.
  # end /datasets/{id}

  '/datasets/{id}/shape':
    put:
      tags:
        - Dataset
      summary: Modify a Dataset's dimensions.
      description: >
          Modify a Dataset's dimensions.

          New extents must be greater than or equal to the current extents.

          New extents cannot exceed the shape's maxDim for that dimension, if
          specified.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - in: body
          name: shape
          required: true
          description: >
              Array of nonzero integers.

              Length must equal Dataset's rank -- one value per dimension.
          schema:
            type: object
            required:
              - shape
            properties:
              shape:
                type: array
                items:
                  type: number
      responses:
        '201':
          description: Shape dimensions updated.
          schema:
            type: object
            properties:
              hrefs: # TODO: count and relations known?
                type: array
                items:
                  type: string
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Dataset
      summary: Get information about a Dataset's shape.
      description: Get information about a Dataset's shape.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            type: object # TODO specify?
        default:
          description: Operation unsuccessful.
  #end /datasets/{id}/shape

  '/datasets/{id}/type':
    get:
      tags:
        - Dataset
      summary: Get information about a Dataset's type.
      description: Get information about a Dataset's type.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            type: object # TODO
        default:
          description: Operation unsuccessful.
  #end /datasets/{id}/type

  '/datasets/{id}/value':
    put:
      tags:
        - Dataset
      summary: Write values to Dataset.
      description: >
          Write values to Dataset.

          Overwrites any existing data in update region.
      consumes:
        - 'application/json'
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/content_json_only'
        - in: body
          description: >
              JSON object describing what to write.

              `start`, `stop`, and `step` are optional, but _either_ `value` or
              `value_base64` must be provided.

              If `points` is provided, each entry is the coordinate of a data
              point to write. Overrides `start`, `stop`, and `step`. Must have
              same length as `value` list.
          name: PutValueObject
          required: true
          schema:
            $ref: '#/definitions/PutValueObject'
      responses:
        '200':
          description: Update/write successful.
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Dataset
      summary: Get values from Dataset.
      description: Either get the entire Dataset or a selection.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - in: query
          name: select
          type: string
          description: >
              URL-encoded string representing a selection array.

              Array-string of 
              `'[' DIMENSION_SELECT { ',' DIMENSION_SELECT } ']'`,
              where `DIMENSION_SELECT` has format of:
              `START ':' STEP [ ':' STEP ]`.

              `START` must be a non-negative integer less than the dimension's
              extent.

              `STOP` must be greater than `START`, and less than or equal to
              the dimension's extent. Is the first index _not_ included in the
              selection hyperslab.

              `STOP` must be an integer greater than zero; is the increment of
              index in dimension between each value. If omitted, defaults to
              `1` (contiguous indices), and there should be no trailing colon.

              _Example_: `[1:9,1:9:2]`
        - in: query
          name: query
          type: string
          description: >
              URL-encoded string of conditional expression to filter selection.

              E.g., the condition `(temp > 32.0) & (dir == 'N')` would return
              elements of the dataset where the `temp` field was greater than
              `32.0` _and_ the `dir` field was equal to `N`.

              _Must_ be URL-encoded.

              Can be used in conjunction with `select` parameter to filter
              a hyberslab selection. Can be used in conjunction with `Limit`
              parameter to restrict number of values returned.

              (TODO: verify) Only applicable to one-dimensional compound
              datasets.
        - in: query
          name: Limit
          type: number
          description: >
              Integer greater than zero.

              If present, specifies maximum number of values to return.

              Apples only to the `query` parameter.
        - in: header
          name: Accept
          type: string
          enum:
            - 'application/json'
            - 'application/octet-stream'
          default: 'application/json'
          description: >
              If expecting a binary data response, use
              `application/octet-stream` in place of the usual
              `application/json`

              Binary data responses are only supported for datasets with
              fixed-length type. Binary response will consist of the equivalent
              binary data of the `data` item in the JSON response -- no data
              representing `hrefs` is returned.

              Verify return type with the `Content-Type` response header.
        - $ref: '#/parameters/authorization'
## WISHLIST: Remove parameters from URI and fold in 'POST DATASET' with
##           a single request body format:
##type: object:
##properties:
##  points:
##    description: >
##        Specific data points to return from the Dataset.
##
##        Overrides any other selection element.
##    type: array
##    items:
##      type: array
##      items:
##        type: number # 0 <= N < extent
##  select:
##    description: >
##        Coordinate ranges defining a hyberslab subset of Dataset.
##
##        Array length must equal rank of Dataset.
##        Empty range object, `{}`, stands in for entire dimension.
##    type: array
##    items:
##      type: object
##      properties:
##        start:
##          description: >
##              Integer greater than or equal to `0` and less than extent.
##
##              Default `0`.
##          type: number
##        stop:
##          description: >
##              Integer greater than `start` and less than or equal to extent.
##
##              First index _not_ included in selection hyperslab.
##
##              Default dimension extent. (`-1`?)
##          type: number
##        step:
##          description: Positive, non-zero integer. Default `1`.
##          type: number
##    example: # array of 'objects'
##      - {}
##      - {"start": 3, "stop": 19, "step": 4}
##      - {"stop": 10, "step: 3}
##      - {"start": 126}
##    # would get [[0,1,..,n], [3,7,11,15], [0,3,6,9], [126,127,..,n]]
##  query:
##    description: >
##        Filter response values (even from hyperslab selection).
##    type: object
##    properties:
##      condition:
##        description: >
##            String describing contitions required to include the value in
##            response. E.g., `"(temp > 32.0) & (dir == 'N')"` would return
##            elements of the dataset where the `temp` field was greater than
##            `32.0` and the `dir` field was equal to `N`.
##        type: string
##      limit:
##        description: Integer greater than 0, maximum number of values to get.
##        type: number
      responses:
        '200':
          description: OK
          headers:
            'Content-Type':
              description: >
                  MIME type of response.

                  Normally 'application/json' but can be
                  'application/octet-stream' if binary data response was
                  requested.
              type: string
          schema:
            $ref: '#/definitions/GetDatasetSchema'
        default:
          description: Operation unsuccessful.

    post:
      tags:
        - Dataset
      summary: Get specific data points from Dataset.
# TODO: WISHLIST: fold into GET DATASET; 'POST' is counterintuitive.
      parameters:
        - $ref: '#/parameters/path_dataset_uuid'
        - $ref: '#/parameters/query_domain'
        - $ref: '#/parameters/accept_json'
        - $ref: '#/parameters/authorization'
        - in: body
          name: points
          description: JSON array of coordinates in the Dataset.
          required: true
          schema:
            type: object
            properties:
              points:
                type: array
                items:
                  type: string # TODO: '[number]' and '[ [number] ]'
                example: [[0,0], [0,1], [1,0], [1,1]]
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              value:
                type: array
                items:
                  type: string # TODO: any value
                example: [0, 1, 1, 2]
        default:
          description: Operation unsuccessful.
  #end /datasets/{id}/value

#end paths


